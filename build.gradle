plugins {
    id 'idea'
    id 'net.neoforged.gradle.userdev' version "${neogradle_version}"
    id 'net.neoforged.gradle.mixin' version "${neogradle_version}"
    id 'maven-publish'
    id "me.modmuss50.mod-publish-plugin" version "0.4.0"
}

base{
    archivesName = project.mod_name
    version = project.mod_version
    group = project.maven_group
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')

// Default run configurations.
// These can be tweaked, removed, or duplicated as needed.
runs {
    // applies to all the run configs below
    configureEach {
        // Recommended logging data for a userdev environment
        // The markers can be added/remove as needed separated by commas.
        // "SCAN": For mods scan.
        // "REGISTRIES": For firing of registry events.
        // "REGISTRYDUMP": For getting the contents of all registries.
        systemProperty 'forge.logging.markers', 'REGISTRIES'

        // Recommended logging level for the console
        // You can set various levels here.
        // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    // This run config launches GameTestServer and runs all registered gametests, then exits.
    // By default, the server will crash when no gametests are provided.
    // The gametest system is also enabled by default for other run configs under the /test command.
    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
        // workingDirectory project.file('run-data')

        // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    implementation "net.neoforged:neoforge:${neoforge_version}"
}

java {
    withSourcesJar()
}

processResources {
    inputs.property "version", project.mod_version
    filesMatching("META-INF/mods.toml") {
        expand "version": project.mod_version
    }
}

void processJar(Jar jarTask) {
    jarTask.configure {
        from "LICENSE_FABRIC"
        from "LICENSE_FORGE"
        manifest {
            attributes([
                "Specification-Title"     : "${mod_name}",
                "Specification-Vendor"    : "PinkGoosik",
                "Specification-Version"   : "${mod_version}",
                "Implementation-Title"    : "${mod_id}-forge",
                "Implementation-Version"  : "1",
                "Implementation-Vendor"   : "LimonBlaze",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
            ])
        }
    }
}

processJar(jar)

publishMods {
    file = tasks.jar.archiveFile
    changelog = new File("changelog/${mod_version}.md").text
    version = mod_version
    type = ALPHA
    displayName = "[NeoForge]Visuality: Reforged ${mod_version} for ${minecraft_version}"
    modLoaders.add("neoforge")

    curseforge {
        projectId = "704256"
        accessToken = providers.environmentVariable("CURSEFORGE_TOKEN")
        minecraftVersions.add(minecraft_version)
    }

    modrinth {
        projectId = "z13R7Et1"
        accessToken = providers.environmentVariable("MODRINTH_TOKEN")
        minecraftVersions.add(minecraft_version)
    }
}

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}


tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.release = 17
}
