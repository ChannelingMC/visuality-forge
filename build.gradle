plugins {
    id 'idea'
    id 'net.minecraftforge.gradle'
    id 'org.spongepowered.mixin'
    id 'org.parchmentmc.librarian.forgegradle'
    id 'maven-publish'
}

archivesBaseName = project.mod_name
version = project.mod_version
group = project.maven_group

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

minecraft {
    mappings channel: 'parchment', version: "${parchment_version}-${minecraft_version}"

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {

        client {
            workingDirectory project.file('run')

            arg "-mixin.config=${project.mod_id}.mixins.json"

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', project.mod_id

            mods {
                "${project.mod_id}" {
                    source sourceSets.main
                }
            }
        }

        server {

            workingDirectory project.file('run')

            arg "-mixin.config=${project.mod_id}.mixins.json"

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', project.mod_id

            mods {
                "${project.mod_id}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            args '--mod', project.mod_id,
                '--all', '--output', file('src/generated/resources/'),
                '--existing', file('src/main/resources/')

            mods {
                "${project.mod_id}" {
                    source sourceSets.main
                }
            }
        }

    }
}

repositories {
    maven {
        name "JitPack"
        url 'https://jitpack.io'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    compileOnly(annotationProcessor("com.github.llamalad7.mixinextras:mixinextras-common:${mixin_extras_version}"))
    implementation(jarJar("com.github.llamalad7.mixinextras:mixinextras-forge:${mixin_extras_version}")) {
        transitive = false
        jarJar.ranged(it, "[${mixin_extras_version},)")
    }

    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
    config "${mod_id}.mixins.json"

    debug.verbose = true
    debug.export = true
}

java {
    withSourcesJar()
}

processResources {
    inputs.property "version", project.mod_version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.mod_version
    }
}

void processJar(Jar jarTask) {
    jarTask.configure {
        from "LICENSE_FABRIC"
        from "LICENSE_FORGE"

        manifest {
            attributes([
                "Specification-Title"     : "${mod_name}",
                "Specification-Vendor"    : "PinkGoosik",
                "Specification-Version"   : "${mod_version}",
                "Implementation-Title"    : "${mod_id}-forge",
                "Implementation-Version"  : "1",
                "Implementation-Vendor"   : "LimonBlaze",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "${mod_id}.mixins.json"
            ])
        }
    }
}

jar {
    classifier 'slim'
    finalizedBy 'reobfJar'
}

tasks.jarJar {
    classifier ""
    finalizedBy reobf.maybeCreate('jarJar')
}

processJar(jar)
processJar(tasks.jarJar)

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = archivesBaseName
            fg.component(it)
        }
    }
    repositories {
        mavenLocal()
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.release = 17
}
